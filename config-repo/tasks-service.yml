# ==============================================================
# Externalized config for 'tasks-service'  (Phase-2 + add-on)
# Preserva as TUAS definições originais e acrescenta Resilience4j
# e melhorias para descoberta/balanceamento e logging.
# ==============================================================

server:
  port: 8081
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: tasks-service
  datasource:
    # In-memory H2; perfect for demos. Data resets on restart.
    url: jdbc:h2:mem:tasks;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: update         # ok for dev; do NOT use in prod
    show-sql: false
  h2:
    console:
      enabled: true
      path: /h2-console

# Eureka client settings so the service registers at the discovery server
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://eureka:8761/eureka}
  instance:
    # Mantemos a preferência por IP (equivalente ao teu preferIpAddress:true)
    #prefer-ip-address: true
    # ID único por instância (útil quando arrancas 8081/8082 para veres LB)
    instance-id: ${spring.application.name}:${server.port:${random.value}}:${random.uuid}

# Actuator endpoints (mantém a tua lista extensa)
management:
  endpoints:
    web:
      exposure:
        include: health,info,env,configprops,loggers,metrics,threaddump,heapdump,httpexchanges

# ====== Add-on: Resilience4j (timeouts, retries, circuit breaker) ======
resilience4j:
  timelimiter:
    instances:
      externalClient:
        # Timeout total por chamada (didático para demo)
        timeout-duration: 1s
  retry:
    instances:
      externalClient:
        max-attempts: 3
        wait-duration: 200ms
        retry-exceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
  circuitbreaker:
    instances:
      externalClient:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 2

# Base URL da chamada "externa" (demo). Por omissão usa o nome lógico do próprio serviço,
# o que ativa Discovery + LoadBalancer (round-robin se houver 2+ instâncias).
demo:
  outbound:
    base-url: ${DEMO_OUTBOUND_BASEURL:http://tasks-service}

# ====== Logging ======
# Keep your existing config as-is (H2, JPA, Eureka, Actuator, etc.)
# These are the logging-related bits for MDC + readable console logs.

logging:
  # Console pattern includes: ISO date, local port, correlation id, logger and message.
  pattern:
    console: "%clr(%d{ISO8601}){faint} port=%X{localPort} corrId=%X{corrId} %clr(%5p) %clr(${PID:- }){magenta} --- %clr(%-40.40logger{39}){cyan} : %m %clr([%X{path}]){faint}%n"
  level:
    root: INFO
    pt.taskflow: INFO   # ensure your base package logs at INFO

